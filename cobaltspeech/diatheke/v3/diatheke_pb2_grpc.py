# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cobaltspeech.diatheke.v3 import diatheke_pb2 as cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2


class DiathekeServiceStub(object):
    """Service that implements the Cobalt Diatheke Dialog Management API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/cobaltspeech.diatheke.v3.DiathekeService/Version',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.VersionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.VersionResponse.FromString,
                )
        self.ListModels = channel.unary_unary(
                '/cobaltspeech.diatheke.v3.DiathekeService/ListModels',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.ListModelsResponse.FromString,
                )
        self.CreateSession = channel.unary_unary(
                '/cobaltspeech.diatheke.v3.DiathekeService/CreateSession',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.CreateSessionResponse.FromString,
                )
        self.DeleteSession = channel.unary_unary(
                '/cobaltspeech.diatheke.v3.DiathekeService/DeleteSession',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.DeleteSessionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.DeleteSessionResponse.FromString,
                )
        self.UpdateSession = channel.unary_unary(
                '/cobaltspeech.diatheke.v3.DiathekeService/UpdateSession',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.UpdateSessionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.UpdateSessionResponse.FromString,
                )
        self.StreamASR = channel.stream_unary(
                '/cobaltspeech.diatheke.v3.DiathekeService/StreamASR',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRResponse.FromString,
                )
        self.StreamTTS = channel.unary_stream(
                '/cobaltspeech.diatheke.v3.DiathekeService/StreamTTS',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamTTSRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamTTSResponse.FromString,
                )
        self.Transcribe = channel.stream_stream(
                '/cobaltspeech.diatheke.v3.DiathekeService/Transcribe',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.TranscribeRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.TranscribeResponse.FromString,
                )
        self.StreamASRWithPartials = channel.stream_stream(
                '/cobaltspeech.diatheke.v3.DiathekeService/StreamASRWithPartials',
                request_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRWithPartialsRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRWithPartialsResponse.FromString,
                )


class DiathekeServiceServicer(object):
    """Service that implements the Cobalt Diatheke Dialog Management API.
    """

    def Version(self, request, context):
        """Returns version information from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """ListModels returns information about the Diatheke models
        the server can access.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Create a new Diatheke session. Also returns a list of
        actions to take next.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSession(self, request, context):
        """Delete the session. Behavior is undefined if the given
        TokenData in the request is used again after this function is called.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSession(self, request, context):
        """Process input for a session and get an updated session with
        a list of actions to take next. This is the only method
        that modifies the Diatheke session state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamASR(self, request_iterator, context):
        """Create an ASR stream. A result is returned when the
        stream is closed by the client (which forces the ASR to
        endpoint), or when a transcript becomes available on its
        own, in which case the stream is closed by the server.
        The ASR result may be used in the UpdateSession method.
        <br/><br/>
        If the session has a wakeword enabled, and the client
        application is using Diatheke and Cubic to handle the
        wakeword processing, this method will not return a
        result until the wakeword condition has been satisfied.
        Utterances without the required wakeword will be
        discarded and no transcription will be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTTS(self, request, context):
        """Create a TTS stream to receive audio for the given reply.
        The stream will close when TTS is finished. The client
        may also close the stream early to cancel the speech
        synthesis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transcribe(self, request_iterator, context):
        """Create an ASR stream for transcription. Unlike StreamASR,
        Transcribe does not listen for a wakeword. This method
        returns a bi-directional stream, and its intended use is
        for situations where a user may say anything at all, whether
        it is short or long, and the application wants to save the
        transcript (e.g., take a note, send a message).
        <br/><br/>
        The first message sent to the server must be the TranscribeAction,
        with remaining messages sending audio data.
        Messages received from the server will include the current
        best partial transcription until the full transcription is
        ready. The stream ends when either the client application
        closes it, a predefined duration of silence (non-speech)
        occurs, or the end-transcription intent is recognized.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamASRWithPartials(self, request_iterator, context):
        """Performs bidirectional streaming speech recognition. Receive results while
        sending audio. Each result will either be a partial ASR result, or a final
        result. Partial results will be sent as soon as they are ready, and all
        results will be sent, regardless of any wakeword configuration in the
        session. A final result will be sent exactly once, and the stream will be
        closed then. If a session has a wakeword enabled, the final result will
        only be emitted if the required wakeword is present. The ASRResult in the
        final message maybe used in the UpdateSession method for further dialog
        processing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiathekeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.VersionRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.VersionResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.ListModelsRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.ListModelsResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.CreateSessionRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.CreateSessionResponse.SerializeToString,
            ),
            'DeleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSession,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.DeleteSessionRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.DeleteSessionResponse.SerializeToString,
            ),
            'UpdateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSession,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.UpdateSessionRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.UpdateSessionResponse.SerializeToString,
            ),
            'StreamASR': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamASR,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRResponse.SerializeToString,
            ),
            'StreamTTS': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTTS,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamTTSRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamTTSResponse.SerializeToString,
            ),
            'Transcribe': grpc.stream_stream_rpc_method_handler(
                    servicer.Transcribe,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.TranscribeRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.TranscribeResponse.SerializeToString,
            ),
            'StreamASRWithPartials': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamASRWithPartials,
                    request_deserializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRWithPartialsRequest.FromString,
                    response_serializer=cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRWithPartialsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cobaltspeech.diatheke.v3.DiathekeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DiathekeService(object):
    """Service that implements the Cobalt Diatheke Dialog Management API.
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.v3.DiathekeService/Version',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.VersionRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.v3.DiathekeService/ListModels',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.ListModelsRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.v3.DiathekeService/CreateSession',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.CreateSessionRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.CreateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.v3.DiathekeService/DeleteSession',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.DeleteSessionRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.DeleteSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.v3.DiathekeService/UpdateSession',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.UpdateSessionRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.UpdateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamASR(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/cobaltspeech.diatheke.v3.DiathekeService/StreamASR',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTTS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cobaltspeech.diatheke.v3.DiathekeService/StreamTTS',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamTTSRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamTTSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transcribe(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cobaltspeech.diatheke.v3.DiathekeService/Transcribe',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.TranscribeRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.TranscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamASRWithPartials(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cobaltspeech.diatheke.v3.DiathekeService/StreamASRWithPartials',
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRWithPartialsRequest.SerializeToString,
            cobaltspeech_dot_diatheke_dot_v3_dot_diatheke__pb2.StreamASRWithPartialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
