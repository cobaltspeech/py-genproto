# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cobaltspeech.chosun.v2 import chosun_pb2 as cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2


class ChosunServiceStub(object):
    """Service that implements the Cobalt Natural Language Understanding API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/cobaltspeech.chosun.v2.ChosunService/Version',
                request_serializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.VersionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.VersionResponse.FromString,
                )
        self.ListModels = channel.unary_unary(
                '/cobaltspeech.chosun.v2.ChosunService/ListModels',
                request_serializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ListModelsResponse.FromString,
                )
        self.Parse = channel.unary_unary(
                '/cobaltspeech.chosun.v2.ChosunService/Parse',
                request_serializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ParseRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ParseResponse.FromString,
                )


class ChosunServiceServicer(object):
    """Service that implements the Cobalt Natural Language Understanding API.
    """

    def Version(self, request, context):
        """Returns server version information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """ListModels returns information about the Chosun models
        the server can access.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Parse(self, request, context):
        """Process text and return the recognized intents and entity values.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChosunServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.VersionRequest.FromString,
                    response_serializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.VersionResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ListModelsRequest.FromString,
                    response_serializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ListModelsResponse.SerializeToString,
            ),
            'Parse': grpc.unary_unary_rpc_method_handler(
                    servicer.Parse,
                    request_deserializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ParseRequest.FromString,
                    response_serializer=cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ParseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cobaltspeech.chosun.v2.ChosunService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChosunService(object):
    """Service that implements the Cobalt Natural Language Understanding API.
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.chosun.v2.ChosunService/Version',
            cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.VersionRequest.SerializeToString,
            cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.chosun.v2.ChosunService/ListModels',
            cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ListModelsRequest.SerializeToString,
            cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Parse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.chosun.v2.ChosunService/Parse',
            cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ParseRequest.SerializeToString,
            cobaltspeech_dot_chosun_dot_v2_dot_chosun__pb2.ParseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
