# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cobaltspeech.privacyscreen.v1 import privacyscreen_pb2 as cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2


class PrivacyScreenServiceStub(object):
    """Service that implements the Cobalt Privacy Screen API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/Version',
                request_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.VersionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.VersionResponse.FromString,
                )
        self.ListModels = channel.unary_unary(
                '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/ListModels',
                request_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.ListModelsResponse.FromString,
                )
        self.RedactTranscript = channel.unary_unary(
                '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/RedactTranscript',
                request_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.RedactTranscriptRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.RedactTranscriptResponse.FromString,
                )
        self.StreamingRedactTranscribedAudio = channel.stream_stream(
                '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/StreamingRedactTranscribedAudio',
                request_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingRedactTranscribedAudioRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingRedactTranscribedAudioResponse.FromString,
                )
        self.StreamingTranscribeAndRedact = channel.stream_stream(
                '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/StreamingTranscribeAndRedact',
                request_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingTranscribeAndRedactRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingTranscribeAndRedactResponse.FromString,
                )


class PrivacyScreenServiceServicer(object):
    """Service that implements the Cobalt Privacy Screen API.
    """

    def Version(self, request, context):
        """Returns version information from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """ListModels returns information about the models the server can access.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RedactTranscript(self, request, context):
        """redacts transcript using a redaction engine that is configured with the
        provided redaction configuration.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingRedactTranscribedAudio(self, request_iterator, context):
        """Performs bidirectional streaming redaction on transcribed audio. Receive
        redacted audio while sending audio. The transcription of audio data must be
        ready before sending the audio.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingTranscribeAndRedact(self, request_iterator, context):
        """Performs bidirectional streaming speech recognition and redaction. Receive
        redacted audio and transcriptions while sending audio.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrivacyScreenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.VersionRequest.FromString,
                    response_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.VersionResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.ListModelsRequest.FromString,
                    response_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.ListModelsResponse.SerializeToString,
            ),
            'RedactTranscript': grpc.unary_unary_rpc_method_handler(
                    servicer.RedactTranscript,
                    request_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.RedactTranscriptRequest.FromString,
                    response_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.RedactTranscriptResponse.SerializeToString,
            ),
            'StreamingRedactTranscribedAudio': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRedactTranscribedAudio,
                    request_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingRedactTranscribedAudioRequest.FromString,
                    response_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingRedactTranscribedAudioResponse.SerializeToString,
            ),
            'StreamingTranscribeAndRedact': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingTranscribeAndRedact,
                    request_deserializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingTranscribeAndRedactRequest.FromString,
                    response_serializer=cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingTranscribeAndRedactResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cobaltspeech.privacyscreen.v1.PrivacyScreenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrivacyScreenService(object):
    """Service that implements the Cobalt Privacy Screen API.
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/Version',
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.VersionRequest.SerializeToString,
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/ListModels',
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.ListModelsRequest.SerializeToString,
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RedactTranscript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/RedactTranscript',
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.RedactTranscriptRequest.SerializeToString,
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.RedactTranscriptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingRedactTranscribedAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/StreamingRedactTranscribedAudio',
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingRedactTranscribedAudioRequest.SerializeToString,
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingRedactTranscribedAudioResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingTranscribeAndRedact(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cobaltspeech.privacyscreen.v1.PrivacyScreenService/StreamingTranscribeAndRedact',
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingTranscribeAndRedactRequest.SerializeToString,
            cobaltspeech_dot_privacyscreen_dot_v1_dot_privacyscreen__pb2.StreamingTranscribeAndRedactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
