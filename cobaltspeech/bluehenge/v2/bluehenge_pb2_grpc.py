# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cobaltspeech.bluehenge.v2 import bluehenge_pb2 as cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2


class BluehengeServiceStub(object):
    """Bluehenge is designed to help with maintainance and repair tasks.
    When paired with other cobalt offerings, it can provide a hands-free virtual assistant for technicians.

    Data is extracted from repair manuals and stored in a knowledge graph database.
    During the extraction process, links back to the original documents are created.
    Procedure data will include those links for convenience.

    Each manual may have a different structure, but generally uses groups of simple steps.
    Bluehenge assumes the following structure, which should be generic enough for most applications:
    Procedures > Tasks > Steps.
    For example:
    A Procedure would be a full service item, such as replacing an alternator.
    A Task would be to remove the old alternator or install the new one.
    A Step would be to remove the 4 bolts that mount the alternator.

    This API often referes to names and numbers for each procedure, task, and step.
    Procedure numbers are often in the form of Chapter.Section.  i.e. 4.2 or 4-2.
    Task numbers extend that the procedure number.  4.2.3 or 4-2-3.
    Steps are a simple count after the procedure number.  4.2.3 step #5.
    Because of the variety of user manuals, these names/numbers will all be treated as strings.
    Each application will be responsible for any string manipulation they need.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/Version',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.VersionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.VersionResponse.FromString,
                )
        self.ListModels = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/ListModels',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListModelsResponse.FromString,
                )
        self.CreateSession = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/CreateSession',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.CreateSessionResponse.FromString,
                )
        self.DeleteSession = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/DeleteSession',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.DeleteSessionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.DeleteSessionResponse.FromString,
                )
        self.UpdateSession = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/UpdateSession',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.UpdateSessionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.UpdateSessionResponse.FromString,
                )
        self.StreamASR = channel.stream_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/StreamASR',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamASRRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamASRResponse.FromString,
                )
        self.StreamTTS = channel.unary_stream(
                '/cobaltspeech.bluehenge.v2.BluehengeService/StreamTTS',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamTTSRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamTTSResponse.FromString,
                )
        self.Transcribe = channel.stream_stream(
                '/cobaltspeech.bluehenge.v2.BluehengeService/Transcribe',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.TranscribeRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.TranscribeResponse.FromString,
                )
        self.ListProcedures = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/ListProcedures',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListProceduresRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListProceduresResponse.FromString,
                )
        self.ListTrees = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/ListTrees',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListTreesRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListTreesResponse.FromString,
                )
        self.GetProcedure = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/GetProcedure',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetProcedureRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetProcedureResponse.FromString,
                )
        self.GetTree = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/GetTree',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetTreeRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetTreeResponse.FromString,
                )
        self.SaveNote = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/SaveNote',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.SaveNoteRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.SaveNoteResponse.FromString,
                )
        self.GetEntityImageData = channel.unary_unary(
                '/cobaltspeech.bluehenge.v2.BluehengeService/GetEntityImageData',
                request_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetEntityImageDataRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetEntityImageDataResponse.FromString,
                )


class BluehengeServiceServicer(object):
    """Bluehenge is designed to help with maintainance and repair tasks.
    When paired with other cobalt offerings, it can provide a hands-free virtual assistant for technicians.

    Data is extracted from repair manuals and stored in a knowledge graph database.
    During the extraction process, links back to the original documents are created.
    Procedure data will include those links for convenience.

    Each manual may have a different structure, but generally uses groups of simple steps.
    Bluehenge assumes the following structure, which should be generic enough for most applications:
    Procedures > Tasks > Steps.
    For example:
    A Procedure would be a full service item, such as replacing an alternator.
    A Task would be to remove the old alternator or install the new one.
    A Step would be to remove the 4 bolts that mount the alternator.

    This API often referes to names and numbers for each procedure, task, and step.
    Procedure numbers are often in the form of Chapter.Section.  i.e. 4.2 or 4-2.
    Task numbers extend that the procedure number.  4.2.3 or 4-2-3.
    Steps are a simple count after the procedure number.  4.2.3 step #5.
    Because of the variety of user manuals, these names/numbers will all be treated as strings.
    Each application will be responsible for any string manipulation they need.

    """

    def Version(self, request, context):
        """Returns version information of the Bluehenge server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """ListModels returns information about the Bluehenge models
        the server can access.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Create a new Bluehenge session. Also returns a list of
        actions to take next.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSession(self, request, context):
        """Delete the session. Behavior is undefined if the given
        TokenData is used again after this function is called.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSession(self, request, context):
        """Process input for a session and get an updated session with
        a list of actions to take next. This is the only method
        that modifies the Bluehenge session state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamASR(self, request_iterator, context):
        """Create an ASR stream. A result is returned when the
        stream is closed by the client (which forces the ASR to
        endpoint), or when a transcript becomes available on its
        own, in which case the stream is closed by the server.
        The ASR result may be used in the UpdateSession method.
        <br/><br/>
        If the session has a wakeword enabled, and the client
        application is using Diatheke and Cubic to handle the
        wakeword processing, this method will not return a
        result until the wakeword condition has been satisfied.
        Utterances without the required wakeword will be
        ignored and no transcription will be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTTS(self, request, context):
        """Create a TTS stream to receive audio for the given reply.
        The stream will close when TTS is finished. The client
        may also close the stream early to cancel the speech
        synthesis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transcribe(self, request_iterator, context):
        """Create an ASR stream for transcription. Unlike StreamASR,
        Transcribe does not listen for a wakeword. This method
        returns a bi-directional stream, and its intended use is
        for situations where a user may say anything at all, whether
        it is short or long, and the application wants to save the
        transcript (e.g., take a note, send a message).
        <br/><br/>
        The first message sent to the server must be the TranscribeAction,
        with remaining messages sending audio data.
        Messages received from the server will include the current
        best partial transcription until the full transcription is
        ready. The stream ends when either the client application
        closes it, a predefined duration of silence (non-speech)
        occurs, or the end-transcription intent is recognized.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProcedures(self, request, context):
        """Returns a list of all the procedures.
        This list is contains a simplified representation of the procedures,
        which can be helpful for displaying a directory or table of contents.
        The full details of an individual procedure can be retrieved via GetProcedure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTrees(self, request, context):
        """Returns a list of all the trees.
        This list is contains a simplified representation of the trees,
        which can be helpful for displaying a directory or table of contents.
        The full details of an individual tree can be retrieved via GetTree.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcedure(self, request, context):
        """Gets a single procedure identified by id.
        The response returns everything you should need to be able to display the Procedure and it's Steps and Tasks to the user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTree(self, request, context):
        """Gets a single tree identified by id.
        Trees contain instructions followed by questions to help users
        diagnose problems. The answers at each step point to another
        TreeNode to continue the diagnosis. This response returns an
        information bearing Tree struct with a list of its TreeNodes in
        a linear order starting with the first one the user should see.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveNote(self, request, context):
        """Saves a note in a specific step during a procedure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEntityImageData(self, request, context):
        """Gets the data related with an image.
        The actual image will be served over HTTP.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BluehengeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.VersionRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.VersionResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListModelsRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListModelsResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.CreateSessionRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.CreateSessionResponse.SerializeToString,
            ),
            'DeleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSession,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.DeleteSessionRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.DeleteSessionResponse.SerializeToString,
            ),
            'UpdateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSession,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.UpdateSessionRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.UpdateSessionResponse.SerializeToString,
            ),
            'StreamASR': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamASR,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamASRRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamASRResponse.SerializeToString,
            ),
            'StreamTTS': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTTS,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamTTSRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamTTSResponse.SerializeToString,
            ),
            'Transcribe': grpc.stream_stream_rpc_method_handler(
                    servicer.Transcribe,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.TranscribeRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.TranscribeResponse.SerializeToString,
            ),
            'ListProcedures': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProcedures,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListProceduresRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListProceduresResponse.SerializeToString,
            ),
            'ListTrees': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTrees,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListTreesRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListTreesResponse.SerializeToString,
            ),
            'GetProcedure': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProcedure,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetProcedureRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetProcedureResponse.SerializeToString,
            ),
            'GetTree': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTree,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetTreeRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetTreeResponse.SerializeToString,
            ),
            'SaveNote': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveNote,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.SaveNoteRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.SaveNoteResponse.SerializeToString,
            ),
            'GetEntityImageData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntityImageData,
                    request_deserializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetEntityImageDataRequest.FromString,
                    response_serializer=cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetEntityImageDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cobaltspeech.bluehenge.v2.BluehengeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BluehengeService(object):
    """Bluehenge is designed to help with maintainance and repair tasks.
    When paired with other cobalt offerings, it can provide a hands-free virtual assistant for technicians.

    Data is extracted from repair manuals and stored in a knowledge graph database.
    During the extraction process, links back to the original documents are created.
    Procedure data will include those links for convenience.

    Each manual may have a different structure, but generally uses groups of simple steps.
    Bluehenge assumes the following structure, which should be generic enough for most applications:
    Procedures > Tasks > Steps.
    For example:
    A Procedure would be a full service item, such as replacing an alternator.
    A Task would be to remove the old alternator or install the new one.
    A Step would be to remove the 4 bolts that mount the alternator.

    This API often referes to names and numbers for each procedure, task, and step.
    Procedure numbers are often in the form of Chapter.Section.  i.e. 4.2 or 4-2.
    Task numbers extend that the procedure number.  4.2.3 or 4-2-3.
    Steps are a simple count after the procedure number.  4.2.3 step #5.
    Because of the variety of user manuals, these names/numbers will all be treated as strings.
    Each application will be responsible for any string manipulation they need.

    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/Version',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.VersionRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/ListModels',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListModelsRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/CreateSession',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.CreateSessionRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.CreateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/DeleteSession',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.DeleteSessionRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.DeleteSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/UpdateSession',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.UpdateSessionRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.UpdateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamASR(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/cobaltspeech.bluehenge.v2.BluehengeService/StreamASR',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamASRRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamASRResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTTS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/StreamTTS',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamTTSRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.StreamTTSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transcribe(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cobaltspeech.bluehenge.v2.BluehengeService/Transcribe',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.TranscribeRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.TranscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProcedures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/ListProcedures',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListProceduresRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListProceduresResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTrees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/ListTrees',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListTreesRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.ListTreesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProcedure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/GetProcedure',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetProcedureRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetProcedureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/GetTree',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetTreeRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetTreeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/SaveNote',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.SaveNoteRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.SaveNoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEntityImageData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.bluehenge.v2.BluehengeService/GetEntityImageData',
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetEntityImageDataRequest.SerializeToString,
            cobaltspeech_dot_bluehenge_dot_v2_dot_bluehenge__pb2.GetEntityImageDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
